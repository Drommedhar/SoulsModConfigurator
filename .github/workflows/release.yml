name: Create Release

on:
  push:
    branches: [ main ]

jobs:
  release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Get current version
      id: get_version
      run: |
        $csprojPath = "SoulsConfigurator/SoulsModConfigurator/SoulsModConfigurator.csproj"
        $content = Get-Content $csprojPath -Raw
        $versionMatch = [regex]::Match($content, '<Version>(\d+)\.(\d+)\.(\d+)\.(\d+)</Version>')
        
        if ($versionMatch.Success) {
          $major = [int]$versionMatch.Groups[1].Value
          $minor = [int]$versionMatch.Groups[2].Value
          $patch = [int]$versionMatch.Groups[3].Value
          $build = [int]$versionMatch.Groups[4].Value
          
          Write-Host "Current version: $major.$minor.$patch.$build"
          
          # Increment minor version automatically
          $minor++
          $patch = 0
          
          $newVersion = "$major.$minor.$patch.$build"
          Write-Host "New version: $newVersion"
          
          echo "OLD_VERSION=$major.$($minor-1).$patch.$build" >> $env:GITHUB_OUTPUT
          echo "NEW_VERSION=$newVersion" >> $env:GITHUB_OUTPUT
          echo "MAJOR=$major" >> $env:GITHUB_OUTPUT
          echo "MINOR=$minor" >> $env:GITHUB_OUTPUT
          echo "PATCH=$patch" >> $env:GITHUB_OUTPUT
          echo "BUILD=$build" >> $env:GITHUB_OUTPUT
        } else {
          Write-Error "Could not find version in csproj file"
          exit 1
        }
      shell: pwsh

    - name: Update version in both projects
      run: |
        $newVersion = "${{ steps.get_version.outputs.NEW_VERSION }}"
        
        # Update library project
        $libCsprojPath = "SoulsConfigurator/SoulsConfigurator/SoulsConfigurator.csproj"
        $libContent = Get-Content $libCsprojPath -Raw
        $libContent = $libContent -replace '<AssemblyVersion>\d+\.\d+\.\d+\.\d+</AssemblyVersion>', "<AssemblyVersion>$newVersion</AssemblyVersion>"
        $libContent = $libContent -replace '<FileVersion>\d+\.\d+\.\d+\.\d+</FileVersion>', "<FileVersion>$newVersion</FileVersion>"
        $libContent = $libContent -replace '<Version>\d+\.\d+\.\d+\.\d+</Version>', "<Version>$newVersion</Version>"
        Set-Content $libCsprojPath -Value $libContent
        Write-Host "Updated library project version to $newVersion"
        
        # Update WPF project
        $wpfCsprojPath = "SoulsConfigurator/SoulsModConfigurator/SoulsModConfigurator.csproj"
        $wpfContent = Get-Content $wpfCsprojPath -Raw
        $wpfContent = $wpfContent -replace '<AssemblyVersion>\d+\.\d+\.\d+\.\d+</AssemblyVersion>', "<AssemblyVersion>$newVersion</AssemblyVersion>"
        $wpfContent = $wpfContent -replace '<FileVersion>\d+\.\d+\.\d+\.\d+</FileVersion>', "<FileVersion>$newVersion</FileVersion>"
        $wpfContent = $wpfContent -replace '<Version>\d+\.\d+\.\d+\.\d+</Version>', "<Version>$newVersion</Version>"
        Set-Content $wpfCsprojPath -Value $wpfContent
        Write-Host "Updated WPF project version to $newVersion"
      shell: pwsh

    - name: Restore dependencies
      run: dotnet restore SoulsConfigurator/SoulsConfigurator.sln

    - name: Restore dependencies with runtime
      run: dotnet restore SoulsConfigurator/SoulsModConfigurator/SoulsModConfigurator.csproj --runtime win-x64

    - name: Build project
      run: dotnet build SoulsConfigurator/SoulsConfigurator.sln --configuration Release --no-restore

    - name: Publish application
      run: |
        dotnet publish SoulsConfigurator/SoulsModConfigurator/SoulsModConfigurator.csproj `
          --configuration Release `
          --output "publish" `
          --no-build `
          --self-contained true `
          --runtime win-x64 `
          --framework net8.0-windows `
          -p:PublishSingleFile=false `
          -p:PublishTrimmed=false

    - name: Create release package
      run: |
        $version = "${{ steps.get_version.outputs.NEW_VERSION }}"
        $zipName = "SoulsModConfigurator-v$version.zip"
        
        # Ensure we have the published files
        if (-not (Test-Path "publish")) {
          Write-Error "Publish directory not found"
          exit 1
        }
        
        # List contents for debugging
        Write-Host "Contents of publish directory:"
        Get-ChildItem -Path "publish" -Recurse | ForEach-Object { Write-Host $_.FullName }
        
        # Create zip file with the published application contents
        # Use -Force to ensure we get all files, and specify the contents directly
        $publishFiles = Get-ChildItem -Path "publish" -Recurse
        if ($publishFiles.Count -eq 0) {
          Write-Error "No files found in publish directory"
          exit 1
        }
        
        Compress-Archive -Path "publish\*" -DestinationPath $zipName -Force
        
        # Verify zip was created and has content
        if (Test-Path $zipName) {
          $zipSize = (Get-Item $zipName).Length
          Write-Host "Created release package: $zipName (Size: $zipSize bytes)"
        } else {
          Write-Error "Failed to create zip file"
          exit 1
        }
        
        echo "RELEASE_ZIP=$zipName" >> $env:GITHUB_OUTPUT
      shell: pwsh
      id: package

    - name: Commit version changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add SoulsConfigurator/SoulsConfigurator/SoulsConfigurator.csproj
        git add SoulsConfigurator/SoulsModConfigurator/SoulsModConfigurator.csproj
        git commit -m "[skip ci] Bump version to ${{ steps.get_version.outputs.NEW_VERSION }}" || exit 0
        git push

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.get_version.outputs.NEW_VERSION }}
        name: Release v${{ steps.get_version.outputs.NEW_VERSION }}
        body: |
          ## Changes in v${{ steps.get_version.outputs.NEW_VERSION }}
          
          This release was automatically generated and includes a self-contained Windows executable.
          
          ### What's New
          - Version bump from previous release
          - Latest bug fixes and improvements
          
          ### Download & Installation
          1. Download the `SoulsModConfigurator-v${{ steps.get_version.outputs.NEW_VERSION }}.zip` file below
          2. Extract the contents to a folder of your choice
          3. Run `SoulsModConfigurator.exe` - no additional .NET installation required!
          
          ### System Requirements
          - Windows 10/11 (x64)
          - No additional software required (self-contained)
        files: ${{ steps.package.outputs.RELEASE_ZIP }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
